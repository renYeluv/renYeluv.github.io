<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Renye&#39;s blog</title>
        <link>http://localhost:1313/</link>
        <description>Renye&#39;s blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 07 Nov 2024 16:12:58 &#43;0800</lastBuildDate>
            <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>Union Find</title>
    <link>http://localhost:1313/posts/first_post/</link>
    <pubDate>Thu, 07 Nov 2024 16:12:58 &#43;0800</pubDate><author>
        <name>Author</name>
    </author><guid>http://localhost:1313/posts/first_post/</guid>
    <description><![CDATA[<h1 id="算法笔记1并查集" class="headerLink">
    <a href="#%e7%ae%97%e6%b3%95%e7%ac%94%e8%ae%b01%e5%b9%b6%e6%9f%a5%e9%9b%86" class="header-mark"></a>算法笔记(1):并查集</h1><p>我其实挺喜欢玩解密类的游戏，最早接触的这类游戏应该是诺基亚上的蒙娜丽莎拼图，那个时候总是瞎玩，有时三俩下就拼好，有时10分钟也不见得能成功。</p>
<p>其实当时<strong>隐隐约约能感觉到有一种规律</strong>，比如我总是先把当前能对上号的图片放到正确的位置，再观察余下的要怎么拼；比如有时为了挪动一块拼图到正确的位置而不得不挪动许多块，而这经常是结尾要做的事，将最后一块拼图挪进去，需要以一种“奇怪”的方法，我称之为倒车入库，那时在这种情况下总是有一种奇妙的感觉。可惜自己也并非聪慧过人 or 好奇心爆棚，所以也不曾探索他的规律。而现在，这叫做==算法==。</p>
<p>除了拼图之外，大概就是走迷宫了。经常会在报纸或者杂志书上面有一些迷宫，我就用着铅笔“暴力”尝试(哈哈其实有眼睛的参与，没有穷举那么暴力)。</p>
<p>所以在学习并查集的时候，我很自然的就想到了迷宫的例子。迷宫可以看作这样一个问题：是否存在一条从起点到终点的路径？若是，则给出这条路径；若否，请给出理由。</p>
<p>⚠：实际上通过并查集我们并不知道这条连通路径具体是怎样的，我们要回答的首先是是否存在这样一条连通路径。</p>
<h2 id="问题" class="headerLink">
    <a href="#%e9%97%ae%e9%a2%98" class="header-mark"></a>问题</h2><p>对于一个给定的迷宫，判断该迷宫是否有出口。</p>
<p><img class="tw-inline" loading="lazy" src=D:/Typora/IMAGE/toolwa-maze-1730970746406-2.png   alt="toolwa-maze"  ></p>
<p>对于这样较小的迷宫，肉眼就能很快得出答案，但对于大型迷宫来讲，就不得不借助计算机的帮助。然而迷宫问题对计算机来说相当困难，因为他并不像人一样能&quot;<strong>看见</strong>&quot;。</p>
<p><img class="tw-inline" loading="lazy" src=D:/Typora/IMAGE/image-20241110215317084.png   alt="image-20241110215317084"  ></p>
<p><img class="tw-inline" loading="lazy" src=D:/Typora/IMAGE/image-20241110215358585.png   alt="image-20241110215358585"  ></p>
<h2 id="建模" class="headerLink">
    <a href="#%e5%bb%ba%e6%a8%a1" class="header-mark"></a>建模</h2><p>因此我们需要继续简化问题。<strong>要时刻记住，算法和编程是两个&quot;领域&quot;，编程是将算法处理成计算机能理解的形式，而算法是给出解决问题的步骤，算法才是最基本的。</strong></p>
<p>我们需要表示迷宫的每个&quot;格子&quot;，我们将每个格子<strong>抽象</strong>为一个对象，并用1～n的数字作为唯一标识。并考虑一个更简单的例子：</p>
<p><img class="tw-inline" loading="lazy" src=D:/Typora/IMAGE/image-20241110214512051.png   alt="image-20241110214512051"  ></p>
<p>这个例子和迷宫的区别在于迷宫只有上下左右四个方向进行连接，而该例任意两个元素之间都可以连接。所以如果找到这个问题的算法，我们就能直接应用到迷宫上。这是第二层抽象。</p>
<p>现在，我们就将迷宫这个较<strong>特殊</strong>的问题<strong>转化成</strong>如下的<strong>一般性</strong>问题：</p>
<p><em>问题：给出一组输入，判断任意两个元素之间是否相连。</em></p>
<p><em>输入：第一行为正整数n，表示有多少个元素。余下每行表示这两个元素相连。</em></p>
<p><em>输出：若相连，输出True;否则输出False</em></p>
<p>此外，我们假设”相连“是一种等价关系，即具有如下性质：</p>
<ul>
<li>
<p>自反性：p和p是相连的。</p>
</li>
<li>
<p>对称性：如果p和q是相连的，那么q和p也是相连的。</p>
</li>
<li>
<p>传递性：如果p和q是相连的且q和r是相连的，那么p和r也是相连的。</p>
</li>
</ul>
<p>等价关系能够将对象分为多个等价类。对于该问题，当且仅当两个对象相连时它们才属于同一个等价类。至此我们将问题==<strong>转化</strong>==为求解连通分量。这是第三层抽象。至此，我们才正式开始算法的设计，前面都是具体的定义问题。</p>
<p>我们需要设计一种数据结构和算法，来==<strong>保存</strong>已知的所有等价类的<strong>足够多的信息</strong>==，并用它们来==<strong>判断</strong>==一对新对象是否是相连的(方法为判断它们是否属于同一个等价类)。这也叫动态连通性问题。</p>
<p>我们将等价类称为连通分量。</p>
<h2 id="数据结构与api" class="headerLink">
    <a href="#%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84%e4%b8%8eapi" class="header-mark"></a>数据结构与API</h2><p>对于求解连通分量问题，我们可以进一步细化为如下算法雏形：</p>
<ol>
<li>一开始每个对象都是一个连通分量，所以我们有N个分量，并且我们需要为这N个分量设立唯一标识符。</li>
<li>当给出一组连接时，我们需要判断它们是否属于同一个分量。
<ul>
<li>若是，则无需操作。</li>
<li>若不是，则归并这两个分量。</li>
</ul>
</li>
<li>我们需要查找给定对象所处的分量的标识符。
<ul>
<li>为什么需要这个函数？</li>
<li>我们假设两个对象p,q，他们的分量标识符为m,n。因为2中的归并操作会将m, n归并为一个代表分量的唯一标识符，我们现在并不知道是如何修改的。也许是把m变成n、把n变成m、或者新增一个唯一标识符t,将m,n都修改为t等等情况&hellip;&hellip;.但我们知道的是这会修改p,q中至少一个对象的标识符。</li>
<li>查找的难易程度会取决于算法的设计，我们只是像往常一样，将这种独立的操作封装为一个函数。因为这就是函数设计的原则。</li>
</ul>
</li>
<li>通过上述两个函数，我们现在就可以查找两个对象是否属于同一分量，并返回结果。</li>
</ol>
<p>因此我们给出如下API：</p>
<div class="code-block highlight is-closed show-line-numbers  tw-group tw-my-2">
  <div class="
    code-block-title 
    
    tw-flex 
    tw-flex-row 
    tw-justify-between 
    tw-w-full tw-bg-bgColor-secondary
    ">      
    <button 
      class="
        tw-select-none 
        tw-mx-2 
        tw-block
        group-[.is-open]:tw-rotate-90
        tw-transition-[transform] 
        tw-duration-500 
        tw-ease-in-out
        print:!tw-hidden"
      disabled
      aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"/></svg></button>

    <div class="code-block-title-bar tw-w-full">
      <p class="tw-select-none !tw-my-1">python</p>]]></description>
</item></channel>
</rss>
